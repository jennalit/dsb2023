---
categories:  
- ""    #the front matter should be like the one found in, e.g., blog2.md. It cannot be like the normal Rmd we used
- ""
date: "2023-06-06"
description: Homework 3 # the title that will show up once someone gets to this page
draft: false
image: cardfraud.jpg # save picture in \static\img\blogs. Acceptable formats= jpg, jpeg, or png . Your iPhone pics wont work

keywords: ""
slug: hw3 # slug is the shorthand URL address... no spaces plz
title: Databases, web scraping, and a basic Shiny app
---

---
title: "Homework 3: Databases, web scraping, and a basic Shiny app"
author: "Jenna Thomas"
date: "2023-06-06"
output:
  html_document:
    theme: flatly
    highlight: zenburn
    number_sections: yes
    toc: yes
    toc_float: yes
    code_folding: show
  pdf_document:
    toc: yes
---



# Money in UK politics

[The Westminster Accounts](https://news.sky.com/story/the-westminster-accounts-12786091), a recent collaboration between Sky News and Tortoise Media, examines the flow of money through UK politics. It does so by combining data from three key sources: 

1. [Register of Members’ Financial Interests](https://www.parliament.uk/mps-lords-and-offices/standards-and-financial-interests/parliamentary-commissioner-for-standards/registers-of-interests/register-of-members-financial-interests/), 
1. [Electoral Commission records of donations to parties](http://search.electoralcommission.org.uk/English/Search/Donations), and
1. [Register of All-Party Parliamentary Groups](https://www.parliament.uk/mps-lords-and-offices/standards-and-financial-interests/parliamentary-commissioner-for-standards/registers-of-interests/register-of-all-party-party-parliamentary-groups/). 

You can [search and explore the results](https://news.sky.com/story/westminster-accounts-search-for-your-mp-or-enter-your-full-postcode-12771627) through the collaboration’s interactive database. Simon Willison [has extracted a database](https://til.simonwillison.net/shot-scraper/scraping-flourish) and this is what we will be working with. If you want to read more about [the project’s methodology](https://www.tortoisemedia.com/2023/01/08/the-westminster-accounts-methodology/).


## Open a connection to the database

The database made available by Simon Willison is an `SQLite` database


```r
sky_westminster <- DBI::dbConnect(
  drv = RSQLite::SQLite(),
  dbname = ("sky-westminster-files.db")
)
```

How many tables does the database have?

```r
DBI::dbListTables(sky_westminster)
```

```
## [1] "appg_donations"  "appgs"           "member_appgs"    "members"        
## [5] "parties"         "party_donations" "payments"
```

```r
# 7 tables
```

## Which MP has received the most amount of money? 

You need to work with the `payments` and `members` tables and for now we just want the total among all years. To insert a new, blank chunk of code where you can write your beautiful code (and comments!), please use the following shortcut: `Ctrl + Alt + I` (Windows) or `cmd + option + I` (mac)

```r
payments <- dbReadTable(sky_westminster, "payments", payments)
members <- dbReadTable(sky_westminster, "members", members)


payments %>%
  left_join(members, by = c("member_id" = "id")) %>%
  group_by(name) %>%
  summarise(total = sum(value)) %>%
  slice(which.max(total)) 
```

```
## # A tibble: 1 × 2
##   name           total
##   <chr>          <dbl>
## 1 Theresa May 2809765.
```

```r
# Theresa May has received £2.8m
```


## Any `entity` that accounts for more than 5% of all donations?

Is there any `entity` whose donations account for more than 5% of the total payments given to MPs over the 2020-2022 interval? Who are they and who did they give money to?


```r
payments %>%
  left_join(members, by = c("member_id" = "id")) %>%
  group_by(entity) %>%
  summarise(total = sum(value)) %>%
  mutate(percent_total = total / sum(total)) %>%
  filter(percent_total > 0.05) 
```

```
## # A tibble: 1 × 3
##   entity         total percent_total
##   <chr>          <dbl>         <dbl>
## 1 Withers LLP 1812732.        0.0525
```

```r
# Withers LLP has donated 5.3% of the total (£1.8m)

payments %>%
  left_join(members, by = c("member_id" = "id")) %>%
  filter(entity == "Withers LLP") %>%
  group_by(name) %>%
  summarise(total = sum(value))
```

```
## # A tibble: 1 × 2
##   name                total
##   <chr>               <dbl>
## 1 Sir Geoffrey Cox 1812732.
```

```r
# The entire amount was to Sir Geoffrey Cox
```


## Do `entity` donors give to a single party or not?

- How many distinct entities who paid money to MPS are there?
- How many (as a number and %) donated to MPs belonging to a single party only?


```r
payments %>%
  left_join(members, by = c("member_id" = "id")) %>%
  # count distinct entities
  mutate(total_entities = n_distinct(entity)) %>%
  # add total donations by that entity
  add_count(entity, name = "donations") %>%
  group_by(entity, party_id, donations, total_entities) %>% 
  # split out donations by party
  summarise(value = sum(value), donations_by_party = n()) %>%
  # calculate % of entity's donations to a party
  mutate(percent_to_party = donations_by_party / donations) %>%
  # sanity check
  arrange((percent_to_party)) %>%
  # filter for entities who only donated to a single party
  filter(percent_to_party == 1) 
```

```
## `summarise()` has grouped output by 'entity', 'party_id', 'donations'. You can
## override using the `.groups` argument.
```

```
## # A tibble: 2,036 × 7
## # Groups:   entity, party_id, donations [2,036]
##    entity             party_id donations total_entities value donations_by_party
##    <chr>              <chr>        <int>          <int> <dbl>              <int>
##  1 12 Property FE     p17              1           2213 10000                  1
##  2 1912 Club          p4               1           2213  1800                  1
##  3 39th Street Strat… p4               1           2213  2600                  1
##  4 3V International   p15              1           2213  2000                  1
##  5 5 Oceans Partners… p4               1           2213  5000                  1
##  6 5x15               p15              1           2213   500                  1
##  7 79 Borough Road (… p8               1           2213  3500                  1
##  8 89UP               p15              2           2213 10645                  2
##  9 8hwe               p4               2           2213  6000                  2
## 10 97 Dining Club     p4               1           2213 10000                  1
## # ℹ 2,026 more rows
## # ℹ 1 more variable: percent_to_party <dbl>
```

```r
# 2213 total distinct entities
# 2036 distinct entities only donated to one party
# 92% of entities only donate to a one party
```


## Which party has raised the greatest amount of money in each of the years 2020-2022? 

I would like you to write code that generates the following table. 

<img src="../../images/total_donations_table.png" width="80%" />


```r
parties <- dbReadTable(sky_westminster, "parties", parties)
party_donations <- dbReadTable(sky_westminster, "party_donations", party_donations)

party_donations %>%
  left_join(parties, by = c("party_id" = "id")) %>%
  mutate(date = as.Date(date,'%Y-%m-%d'),
         year = as.numeric(format(date,'%Y'))) %>%
  group_by(year, name = entity) %>%
  summarise(total_year_donations = sum(value)) %>%
  group_by(year) %>%
  slice_max(total_year_donations, n=10)
```

```
## `summarise()` has grouped output by 'year'. You can override using the
## `.groups` argument.
```

```
## # A tibble: 30 × 3
## # Groups:   year [3]
##     year name                                               total_year_donations
##    <dbl> <chr>                                                             <dbl>
##  1  2020 Lord David Sainsbury                                           8000000 
##  2  2020 Unite                                                          5207518.
##  3  2020 JC Bamford (JCB)                                               3237479.
##  4  2020 Unison                                                         1841912.
##  5  2020 GMB Union                                                      1634316.
##  6  2020 Union of Shop, Distributive & Allied Workers (USD…             1427276.
##  7  2020 Malcolm S Healey                                               1250000 
##  8  2020 Bridgemere UK PLC                                              1125000 
##  9  2020 IPGL                                                           1016250 
## 10  2020 David Tilles                                                   1000109.
## # ℹ 20 more rows
```

```r
# I don't know what the proportion is in that table
```


... and then, based on this data, plot the following graph. 


```r
party_donations %>%
  left_join(parties, by = c("party_id" = "id")) %>%
  mutate(date = as.Date(date,'%Y-%m-%d'),
         year = as.numeric(format(date,'%Y'))) %>%
  group_by(year, name) %>%
  summarise(total_year_donations = sum(value)) %>%
  slice_max(total_year_donations, n=10) %>% 
  ggplot(aes(x = reorder(year,-total_year_donations), y = total_year_donations, fill = name)) +
  geom_bar(stat = "identity",position=position_dodge())
```

```
## `summarise()` has grouped output by 'year'. You can override using the
## `.groups` argument.
```

<img src="homework3_files/figure-html/unnamed-chunk-9-1.png" width="672" />

```r
# I'm not sure how to reorder the bars here
```

<img src="../../images/total_donations_graph.png" width="80%" />

This uses the default ggplot colour pallete, as I dont want you to worry about using the [official colours for each party](https://en.wikipedia.org/wiki/Wikipedia:Index_of_United_Kingdom_political_parties_meta_attributes). However, I would like you to ensure the parties are sorted according to total donations and not alphabetically. You may even want to remove some of the smaller parties that hardly register on the graph. Would facetting help you?  

Finally, when you are done working with the databse, make sure you close the connection, or disconnect from the database.


```r
dbDisconnect(sky_westminster)
rm(list = ls())
```


# Anonymised Covid patient data from the CDC

We will be using a dataset with [anonymous Covid-19 patient data that the CDC publishes every month](https://data.cdc.gov/Case-Surveillance/COVID-19-Case-Surveillance-Public-Use-Data-with-Ge/n8mc-b4w4). The file we will use was released on April 11, 2023, and has data on 98 million of patients, with 19 features. This file cannot be loaded in memory, but luckily we have the data in `parquet` format and we will use the `{arrow}` package.

## Obtain the data

The dataset `cdc-covid-geography` in in `parquet` format that {arrow}can handle. It is > 600Mb and too large to be hosted on Canvas or Github, so please download it from dropbox https://www.dropbox.com/sh/q1yk8mmnbbrzavl/AAAxzRtIhag9Nc_hODafGV2ka?dl=0 and save it in your `dsb` repo, under the `data` folder























