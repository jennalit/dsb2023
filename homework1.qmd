---
title: "Homework 1"
author: "Jenna Thomas"
date: 2023-05-14
format: 
  docx: default
  html:
    toc: true
    toc_float: true
    code-fold: true
editor: visual
---

```{r}
#| label: load-libraries
#| echo: false # This option disables the printing of code (only output is displayed).
#| message: false
#| warning: false

library(tidyverse)
library(nycflights13)
library(skimr)

glimpse(flights)
skim(flights)

```

# Data Manipulation

## Problem 1: Use logical operators to find flights that:

```         
-   Had an arrival delay of two or more hours (\> 120 minutes)
-   Flew to Houston (IAH or HOU)
-   Were operated by United (`UA`), American (`AA`), or Delta (`DL`)
-   Departed in summer (July, August, and September)
-   Arrived more than two hours late, but didn't leave late
-   Were delayed by at least an hour, but made up over 30 minutes in flight
```

```{r}
#| label: problem-1

# Had an arrival delay of two or more hours (> 120 minutes)
flights %>%
  filter(arr_delay > 120)

# Flew to Houston (IAH or HOU)
flights %>%
  filter(dest == "IAH" | dest == "HOU")

# Were operated by United (`UA`), American (`AA`), or Delta (`DL`)
flights %>%
  filter(carrier %in% c("UA","AA","DL"))

# Departed in summer (July, August, and September)
flights %>%
  filter(between(month,7,9))
  
# Arrived more than two hours late, but didn't leave late
flights %>%
  filter(arr_delay > 120 & dep_delay < 0)

# Were delayed by at least an hour, but made up over 30 minutes in flight
flights %>%
  filter(dep_delay > 60 & (dep_delay - arr_delay) > 30)

```

## Problem 2: What months had the highest and lowest proportion of cancelled flights? Interpret any seasonal patterns. To determine if a flight was cancelled use the following code

<!-- -->

```         
flights %>% 
  filter(is.na(dep_time)) 
```

```{r}
#| label: problem-2

  
flights %>%
  # total flights that month
  add_count(month, name = "total_flights") %>% 
  # filter to only cancelled flights
  filter(is.na(dep_time)) %>% 
  # cancelled flights that month
  add_count(month, name = "cancelled_flights") %>% 
  # calculate proportion cancelled
  mutate(prop_cancelled = cancelled_flights / total_flights) %>%
  # return just the month and proportion
  group_by(month, prop_cancelled) %>%
  summarise() %>%
  # sort by proportion
  arrange(prop_cancelled)

  # Lowest proportion in October and highest in February. The fall (August - November) seems to be the least likely for cancellation but I don't see much seasonality otherwise.
  
```

## Problem 3: What plane (specified by the `tailnum` variable) traveled the most times from New York City airports in 2013? Please `left_join()` the resulting table with the table `planes` (also included in the `nycflights13` package).

For the plane with the greatest number of flights and that had more than 50 seats, please create a table where it flew to during 2013.

```{r}
view(planes)
view(flights)

# find the right plane 
x <- flights %>%
  # this returns 'n' variable for number of flights by plane
  count(tailnum, name = "num_flights") %>% 
  # joining in order to filter by plane size
  left_join(planes, by = join_by(tailnum)) %>%
  filter(seats > 50) %>%
  # tells you which plane had the most flights and saves that
  slice(which.max(num_flights)) 

# go back to the original table to find the other flights for that plane
flights %>%
  filter(tailnum == x$tailnum)
  
rm(x)
```

## Problem 4: The `nycflights13` package includes a table (`weather`) that describes the weather during 2013. Use that table to answer the following questions:

```         
-   What is the distribution of temperature (`temp`) in July 2013? Identify any important outliers in terms of the `wind_speed` variable.
-   What is the relationship between `dewp` and `humid`?
-   What is the relationship between `precip` and `visib`?
```

```{r}

view(weather)

# distribution of temperature in July
weather %>%
  filter(month == 7) %>%
  filter(!is.na(wind_speed)) %>%
  # I can't think of a better way to identify outliers that will be nice to visualise
  # I don't feel that there are any significant wind speed outliers for July anyway
  mutate(wind_speed_bin = cut(wind_speed, 3)) %>%
  # plot temperature by date and color by wind speed bins
  ggplot(aes(x = day, y = temp, color = wind_speed_bin)) +
  geom_point() +
  scale_color_manual(name = "Wind Speed", labels = c("Low", "Medium", "High"),
                     values = c("gray70","gray40","red"))

# relationship between dewpoint and humidity
weather %>%
  ggplot(aes(x = dewp, y = humid)) +
  geom_point(na.rm = TRUE, color = "gray50", alpha = 0.1) +
  geom_smooth(method = lm, na.rm = TRUE) 

# relationship between precipitation and visibility
weather %>%
  ggplot(aes(y = precip, x = visib)) +
  geom_point(na.rm = TRUE, color = "gray50", alpha = 0.5) +
  geom_smooth(method = lm, na.rm = TRUE) 

```

## Problem 5: Use the `flights` and `planes` tables to answer the following questions:

```         
-   How many planes have a missing date of manufacture? 
-   What are the five most common manufacturers?
-   Has the distribution of manufacturer changed over time as reflected by the airplanes flying from NYC in 2013? (Hint: you may need to use case_when() to recode the manufacturer name and collapse rare vendors into a category called Other.)
```

```{r}

view(planes)

planes %>%
  count(is.na(year)) 
# 70 planes

planes %>%
  # models = number of planes from each manufacturer
  add_count(manufacturer, name = "models") %>% 
  group_by(manufacturer, models) %>%
  summarise() %>%
  # select top five manufacturers based on models
  arrange(desc(models)) %>%
  top_n(models,n=5)

planes %>%
  # find total plane counts to filter out smaller manufacturers
  add_count(manufacturer, name = "tot_plane_count") %>%
  # collapse smaller vendors into 'OTHER' and Airbus into one bucket
  mutate(man_summary = case_when(tot_plane_count <200 ~ "OTHER",
                                 grepl('AIRBUS*', manufacturer) ~ "AIRBUS",
                           .default = manufacturer)) %>%
  # find number of planes by year
  group_by(year, man_summary) %>%
  summarise(plane_count = n()) %>%
  # make a graph
  ggplot(aes(x = year, y = plane_count, fill = man_summary)) +
  geom_area(color = "black", size = 0.1, alpha = 0.5) +
  scale_fill_brewer(palette = "GnBu") +
  # filtering to last 40 years for aesthetics
  xlim(1973,2013)

```

## Problem 6: Use the `flights` and `planes` tables to answer the following questions:

```         
-   What is the oldest plane (specified by the tailnum variable) that flew from New York City airports in 2013?
-   How many airplanes that flew from New York City are included in the planes table?
```

```{r}

flights %>%
  # join the data with plane ages
  left_join(planes, by = join_by(tailnum))%>% 
  # select only the oldest (noting that there are two 'year' variables now)
  slice(which.min(year.y)) 
# tailnum = N381AA

# inner join to find shared 
inner_join(flights,planes,by = join_by(tailnum)) %>%
  # find unique ids
  group_by(tailnum) %>% 
  summarise() %>% 
  count()
# 3322 planes


```

## Problem 7: Use the `nycflights13` to answer the following questions:

```         
-   What is the median arrival delay on a month-by-month basis in each airport?
-   For each airline, plot the median arrival delay for each month and origin airport.
```

```{r}
view(flights)

flights %>%
  group_by(month) %>%
  summarise(med_arr_delay = median(arr_delay, na.rm = TRUE))


# just getting a visual of where the bulk of data points lie to set y scale reasonably
ggplot(flights, aes(x = arr_delay)) +
  geom_histogram()

# misinterpreted the question but leaving it anyway
flights %>%
  ggplot(aes(x = as.factor(month), y = arr_delay, color = origin)) +
    geom_boxplot(outlier.shape = NA) +
    scale_y_continuous(limits = c(-100, 100)) 

# carrier median arrival delay by month and origin 
flights %>%
  group_by(carrier, month, origin) %>%
  summarise(med_arr_delay = median(arr_delay, na.rm = TRUE)) %>%
  ggplot(aes(x = as.factor(month), y = med_arr_delay, color = origin)) +
  geom_point() + 
  geom_line(aes(x = month, y = med_arr_delay)) +
  facet_wrap(~carrier, scales = "free_y") +
  # theme(legend.position="none") +
  xlab("Month") + ylab("Median Arrival Delay")

# origin median arrival delay by month and carrier
flights %>%
  group_by(carrier, month, origin) %>%
  summarise(med_arr_delay = median(arr_delay, na.rm = TRUE)) %>%
  ggplot(aes(x = as.factor(month), y = med_arr_delay, color = carrier)) +
  geom_point() + 
  geom_line(aes(x = month, y = med_arr_delay)) +
  facet_wrap(~origin, ncol = 1) +
  xlab("Month") + ylab("Median Arrival Delay")
           

```

## Problem 8: Let's take a closer look at what carriers service the route to San Francisco International (SFO). Join the `flights` and `airlines` tables and count which airlines flew the most to SFO. Produce a new dataframe, `fly_into_sfo` that contains three variables: the `name` of the airline, e.g., `United Air Lines Inc.` not `UA`, the count (number) of times it flew to SFO, and the `percent` of the trips that that particular airline flew to SFO.

```{r}

view(airlines)

fly_into_sfo <- flights %>%
  # get carrier names
  left_join(airlines, by = join_by(carrier)) %>% 
  # total number of flights for each carrier
  add_count(carrier, name = "total_flights") %>% 
  # now filter by SFO and count flights
  filter(dest == "SFO") %>%
  add_count(carrier, name = "sfo_flights") %>% 
  # calculate percent sfo
  mutate(percent_sfo = sfo_flights/total_flights *100) %>%
  group_by(name) %>%
  # really need to figure out how to just return the shared variable
  summarise(count = mean(sfo_flights),percent = mean(percent_sfo)) 

```

And here is some bonus ggplot code to plot your dataframe

```{r}
#| label: ggplot-flights-toSFO
#| message: false
#| warning: false

fly_into_sfo %>% 
  
  # sort 'name' of airline by the numbers it times to flew to SFO
  mutate(name = fct_reorder(name, count)) %>% 
  
  ggplot() +
  
  aes(x = count, 
      y = name) +
  
  # a simple bar/column plot
  geom_col() +
  
  # add labels, so each bar shows the % of total flights 
  geom_text(aes(label = percent),
             hjust = 1, 
             colour = "white", 
             size = 5)+
  
  # add labels to help our audience  
  labs(title="Which airline dominates the NYC to SFO route?", 
       subtitle = "as % of total flights in 2013",
       x= "Number of flights",
       y= NULL) +
  
  theme_minimal() + 
  
  # change the theme-- i just googled those , but you can use the ggThemeAssist add-in
  # https://cran.r-project.org/web/packages/ggThemeAssist/index.html
  
  theme(#
    # so title is left-aligned
    plot.title.position = "plot",
    
    # text in axes appears larger        
    axis.text = element_text(size=12),
    
    # title text is bigger
    plot.title = element_text(size=18)
      ) +

  # add one final layer of NULL, so if you comment out any lines
  # you never end up with a hanging `+` that awaits another ggplot layer
  NULL
 
 rm(list = ls())
```

## Problem 9: Let's take a look at cancellations of flights to SFO. We create a new dataframe `cancellations` as follows

```{r}

cancellations <- flights %>% 
  
  # just filter for destination == 'SFO'
  filter(dest == 'SFO') %>% 
  
  # a cancelled flight is one with no `dep_time` 
  filter(is.na(dep_time))

```

I want you to think how we would organise our data manipulation to create the following plot. No need to write the code, just explain in words how you would go about it.

| 

![](images/sfo-cancellations.png)

## Problem 10: On your own -- Hollywood Age Gap

The website https://hollywoodagegap.com is a record of *THE AGE DIFFERENCE IN YEARS BETWEEN MOVIE LOVE INTERESTS*. This is an informational site showing the age gap between movie love interests and the data follows certain rules:

-   The two (or more) actors play actual love interests (not just friends, coworkers, or some other non-romantic type of relationship)
-   The youngest of the two actors is at least 17 years old
-   No animated characters

The age gaps dataset includes "gender" columns, which always contain the values "man" or "woman". These values appear to indicate how the characters in each film identify and some of these values do not match how the actor identifies. We apologize if any characters are misgendered in the data!

The following is a data dictionary of the variables used

| variable            | class     | description                                                                                             |
|:--------------|:--------------|:------------------------------------------|
| movie_name          | character | Name of the film                                                                                        |
| release_year        | integer   | Release year                                                                                            |
| director            | character | Director of the film                                                                                    |
| age_difference      | integer   | Age difference between the characters in whole years                                                    |
| couple_number       | integer   | An identifier for the couple in case multiple couples are listed for this film                          |
| actor_1\_name       | character | The name of the older actor in this couple                                                              |
| actor_2\_name       | character | The name of the younger actor in this couple                                                            |
| character_1\_gender | character | The gender of the older character, as identified by the person who submitted the data for this couple   |
| character_2\_gender | character | The gender of the younger character, as identified by the person who submitted the data for this couple |
| actor_1\_birthdate  | date      | The birthdate of the older member of the couple                                                         |
| actor_2\_birthdate  | date      | The birthdate of the younger member of the couple                                                       |
| actor_1\_age        | integer   | The age of the older actor when the film was released                                                   |
| actor_2\_age        | integer   | The age of the younger actor when the film was released                                                 |

```{r}

age_gaps <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-14/age_gaps.csv')

# what's the breakdown of age differences?
age_gaps %>%
  ggplot(aes(x = age_difference)) +
  geom_histogram() + 
  stat_bin(bins = 4)
# vast majority are <25 years

# let's look at how age difference has changed over time
age_gaps %>%
  ggplot(aes(x = release_year, y = age_difference, color = character_2_gender)) +
  geom_point(alpha = 0.2) +
  geom_smooth(method = lm)
# I am a bit surprised that there isn't more correlation between release year and age_diff
# I am not surprised that female characters are more likely to be younger

# now let's check the half plus seven rule
halfrule <- age_gaps %>%
  mutate(minage = ((actor_1_age / 2) + 7),
         maxage = ((actor_1_age - 7) * 2),
         acceptable = ifelse(actor_2_age > minage, TRUE, FALSE)) %>%
  ggplot(aes(x = character_1_gender, fill = acceptable)) +
  geom_bar()
halfrule
# if the older character is a woman, it's much more likely to be acceptable


# which movie has the largest number of love interests and what are the gaps?
age_gaps %>%
  filter(couple_number == max(couple_number))

age_gaps %>%
  filter(movie_name == "Love Actually") %>%
  ggplot(aes(x = as.factor(couple_number), y = age_difference)) +
  geom_point()


# percent of same gender
age_gaps %>%
  mutate(same_sex = case_when(
    character_1_gender == character_2_gender & character_1_gender == "woman" ~ "lesbian",
    character_1_gender == character_2_gender & character_1_gender == "man" ~ "gay",
    character_1_gender != character_2_gender ~ "hetero"
  )) %>%
  group_by(same_sex) %>%
  summarise(no_movies = n()) %>%
  mutate(perc_representation = no_movies / sum(no_movies)*100) 


# change in mean age difference over time
age_gaps %>%
  group_by(release_year) %>%
  summarise(mean_diff = mean(age_difference), med_diff = median(age_difference)) %>%
  ggplot(aes(x = release_year, y = mean_diff)) +
  geom_point() +
  geom_smooth(method = lm)

```

How would you explore this data set? Here are some ideas of tables/ graphs to help you with your analysis

-   How is `age_difference` distributed? What's the 'typical' `age_difference` in movies?

-   The `half plus seven\` rule. Large age disparities in relationships carry certain stigmas. One popular rule of thumb is the [half-your-age-plus-seven](https://en.wikipedia.org/wiki/Age_disparity_in_sexual_relationships#The_.22half-your-age-plus-seven.22_rule) rule. This rule states you should never date anyone under half your age plus seven, establishing a minimum boundary on whom one can date. In order for a dating relationship to be acceptable under this rule, your partner's age must be:

$$\frac{\text{Your age}}{2} + 7 < \text{Partner Age} < (\text{Your age} - 7) * 2$$ How frequently does this rule apply in this dataset?

-   Which movie has the greatest number of love interests?
-   Which actors/ actresses have the greatest number of love interests in this dataset?
-   Is the mean/median age difference staying constant over the years (1935 - 2022)?
-   How frequently does Hollywood depict same-gender love interests?

# Details

-   Who did you collaborate with: Colby Richardson, Shashvat Somany

-   Approximately how much time did you spend on this problem set: \~3hrs

-   What, if anything, gave you the most trouble: Understanding the logic of the actual question in order to come up with a solution (I had to think way too long about how to calculate a proportion)
